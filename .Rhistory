colnames(train)
personal = colnames(train)[3:6]
wrist_acc = colnames(train)[7:8]
chest_acc = colnames(train)[24:25]
wrist_bvp = colnames(train)[9:11]
wrist_eda = colnames(train)[12:17]
wrist_temp = colnames(train)[18:23]
wrist_physio = colnames(train)[9:23]
chest_ecg = colnames(train)[26:28]
chest_eda = colnames(train)[29:34]
chest_emg = colnames(train)[35:37]
chest_resp = colnames(train)[38:40]
chest_temp = colnames(train)[41:46]
chest_physio = colnames(train)[26:46]
all_wrist = colnames(train)[7:23]
all_chest = colnames(train)[24:46]
all_physio = colnames(train)[c(9:23,26:46)]
all_modalities = colnames(train)[c(7:46)]
predictor_vars <- c("personal", "wrist_acc", "chest_acc", "wrist_bvp", "wrist_eda", "wrist_temp", "wrist_physio", "chest_ecg", "chest_eda", "chest_emg", "chest_resp", "chest_temp", "chest_physio", "all_wrist", "all_chest", "all_physio", "all_modalities")
set.seed(1)
test_sample = test
test_sample = test
set.seed(1)
train_indices = sample(nrow(train), 1000)
train_sample = train[train_indices,]
# Run this instead to train on the full train set
# test_sample = train
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(predict_rf, test_sample$label), "\n \n")
}
print_baseline(test_sample)
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(predict_rf, as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
?AUC
rm(ls = list())
rm(list = ls())
library(randomForest)
library(cvAUC)
library(MASS)
load("final_data.rda")
data <- data.frame(new_data)
nrow(subset(data, label == 1))/nrow(data)
nrow(subset(data, label == 0))/nrow(data)
data$label = as.factor(data$label)
test = subset(data, id == 1)
train = subset(data, id != 1)
colnames(train)
personal = colnames(train)[3:6]
wrist_acc = colnames(train)[7:8]
chest_acc = colnames(train)[24:25]
wrist_bvp = colnames(train)[9:11]
wrist_eda = colnames(train)[12:17]
wrist_temp = colnames(train)[18:23]
wrist_physio = colnames(train)[9:23]
chest_ecg = colnames(train)[26:28]
chest_eda = colnames(train)[29:34]
chest_emg = colnames(train)[35:37]
chest_resp = colnames(train)[38:40]
chest_temp = colnames(train)[41:46]
chest_physio = colnames(train)[26:46]
all_wrist = colnames(train)[7:23]
all_chest = colnames(train)[24:46]
all_physio = colnames(train)[c(9:23,26:46)]
all_modalities = colnames(train)[c(7:46)]
predictor_vars <- c("personal", "wrist_acc", "chest_acc", "wrist_bvp", "wrist_eda", "wrist_temp", "wrist_physio", "chest_ecg", "chest_eda", "chest_emg", "chest_resp", "chest_temp", "chest_physio", "all_wrist", "all_chest", "all_physio", "all_modalities")
test_sample = test
set.seed(1)
train_indices = sample(nrow(train), 1000)
train_sample = train[train_indices,]
# Run this instead to train on the full train set
# test_sample = train
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(predict_rf, as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", auc(predict_rf, as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(predict_rf, as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
library(randomForest)
library(MASS)
library(cvAUC)
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
data$label
test = subset(data, id == 1)
train = subset(data, id != 1)
colnames(train)
AUC(as.numeric(predict_rf), as.numeric(test_sample$label))
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
predict_rf <- rep(0,nrow(test_sample))
AUC(as.numeric(predict_rf), as.numeric(test_sample$label))
?AUC
library(MLmetrics)
predict_rf <- rep(0,nrow(test_sample))
AUC(as.numeric(predict_rf), as.numeric(test_sample$label))
as.numeric(test_sample$label)
sum(as.numeric(test_sample$label))
sum(test_sample$label)
sum(test_sample$label)
test_sample
test_sample$label
as.numeric(test_sample$label)
print_baseline <- function(test_sample){
predict_rf <- rep(1,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
predict_rf <- rep(0,nrow(test_sample))
AUC(as.numeric(predict_rf), as.numeric(test_sample$label))
library(randomForest)
library(MASS)
library(cvAUC)
load("final_data.rda")
data <- data.frame(new_data)
nrow(subset(data, label == 1))/nrow(data)
nrow(subset(data, label == 0))/nrow(data)
data$label = as.factor(data$label)
data$label = as.factor(data$label)
test = subset(data, id == 1)
train = subset(data, id != 1)
colnames(train)
personal = colnames(train)[3:6]
wrist_acc = colnames(train)[7:8]
chest_acc = colnames(train)[24:25]
wrist_bvp = colnames(train)[9:11]
wrist_eda = colnames(train)[12:17]
wrist_temp = colnames(train)[18:23]
wrist_physio = colnames(train)[9:23]
chest_ecg = colnames(train)[26:28]
chest_eda = colnames(train)[29:34]
chest_emg = colnames(train)[35:37]
chest_resp = colnames(train)[38:40]
chest_temp = colnames(train)[41:46]
chest_physio = colnames(train)[26:46]
all_wrist = colnames(train)[7:23]
all_chest = colnames(train)[24:46]
all_physio = colnames(train)[c(9:23,26:46)]
all_modalities = colnames(train)[c(7:46)]
predictor_vars <- c("personal", "wrist_acc", "chest_acc", "wrist_bvp", "wrist_eda", "wrist_temp", "wrist_physio", "chest_ecg", "chest_eda", "chest_emg", "chest_resp", "chest_temp", "chest_physio", "all_wrist", "all_chest", "all_physio", "all_modalities")
test_sample = test
set.seed(1)
train_indices = sample(nrow(train), 1000)
train_sample = train[train_indices,]
# Run this instead to train on the full train set
# test_sample = train
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(1,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
predict_rf <- rep(0,nrow(test_sample))
AUC(as.numeric(predict_rf), as.numeric(test_sample$label))
predict_rf <- rep(1,nrow(test_sample))
AUC(as.numeric(predict_rf), as.numeric(test_sample$label))
predict_rf <- rep(1,nrow(test_sample))
AUC(as.numeric(test_sample$label), as.numeric(test_sample$label))
rm(list = ls())
library(cvAUC)
detach("package:cvAUC", unload = TRUE)
library(cvAUC)
predict_rf <- rep(1,nrow(test_sample))
load("final_data.rda")
data <- data.frame(new_data)
nrow(subset(data, label == 1))/nrow(data)
nrow(subset(data, label == 0))/nrow(data)
data$label = as.factor(data$label)
test = subset(data, id == 1)
train = subset(data, id != 1)
colnames(train)
personal = colnames(train)[3:6]
wrist_acc = colnames(train)[7:8]
chest_acc = colnames(train)[24:25]
wrist_bvp = colnames(train)[9:11]
wrist_eda = colnames(train)[12:17]
wrist_temp = colnames(train)[18:23]
wrist_physio = colnames(train)[9:23]
chest_ecg = colnames(train)[26:28]
chest_eda = colnames(train)[29:34]
chest_emg = colnames(train)[35:37]
chest_resp = colnames(train)[38:40]
chest_temp = colnames(train)[41:46]
chest_physio = colnames(train)[26:46]
all_wrist = colnames(train)[7:23]
all_chest = colnames(train)[24:46]
all_physio = colnames(train)[c(9:23,26:46)]
all_modalities = colnames(train)[c(7:46)]
predictor_vars <- c("personal", "wrist_acc", "chest_acc", "wrist_bvp", "wrist_eda", "wrist_temp", "wrist_physio", "chest_ecg", "chest_eda", "chest_emg", "chest_resp", "chest_temp", "chest_physio", "all_wrist", "all_chest", "all_physio", "all_modalities")
test_sample = test
set.seed(1)
train_indices = sample(nrow(train), 1000)
train_sample = train[train_indices,]
# Run this instead to train on the full train set
# test_sample = train
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(1,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
predict_rf <- rep(1,nrow(test_sample))
AUC(as.numeric(test_sample$label), as.numeric(test_sample$label))
print_baseline(test_sample)
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(test_sample$label)), "\n \n")
}
print_baseline(test_sample)
unique(as.numeric(test_sample$label)))
unique(as.numeric(test_sample$label))
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf)+1, as.numeric(test_sample$label)), "\n \n")
}
as.numeric(predict_rf)+1
predict_rf <- rep(0,nrow(test_sample))
as.numeric(predict_rf)
predict_rf <- rep(0,nrow(test_sample))
as.numeric(predict_rf)+1
test_sample$label
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(levels(test_sample$label))[test_sample$label], "\n \n"))
}
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(levels(test_sample$label))[test_sample$label]), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(predict_rf), as.numeric(levels(test_sample$label))[test_sample$label]), "\n \n")
}
print_baseline(test_sample)
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
k = as.factor(c("0", "0"))
as.numeric(levels(k))[k])
k = as.factor(c("0", "0"))
k = as.factor(c("0", "0"))
as.numeric(levels(k))[k]
k = as.factor(c("0", "1"))
as.numeric(levels(k))[k]
k = as.factor(c("1", "0"))
as.numeric(levels(k))[k]
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(levels(predict_rf))[predict_rf], as.numeric(levels(test_sample$label))[test_sample$label]), "\n \n")
}
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(levels(predict_rf))[predict_rf], as.numeric(levels(test_sample$label))[test_sample$label]), "\n \n")
}
print_baseline(test_sample)
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(levels(predict_rf))[predict_rf], as.numeric(levels(test_sample$label))[test_sample$label]), "\n \n")
}
print_baseline(test_sample)
as.numeric(levels(predict_rf))[predict_rf]
as.numeric(levels(predict_rf)[predict_rf])
predict_rf <- rep(0,nrow(test_sample))
as.numeric(levels(predict_rf))[predict_rf]
predict_rf <- rep(0,nrow(test_sample))
as.numeric(as.character(predict_rf))
print_baseline <- function(test_sample){
predict_rf <- rep(0,nrow(test_sample))
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
}
print_baseline(test_sample)
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
LDA <- function(train_sample, test_sample, predictors){
model_lda <- lda(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), data = train_sample)
predict_lda <- predict(model_lda, test_sample)[[1]]
cat("Accuracy is", mean(test_sample$label == predict_lda)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_lda)), as.numeric(as.character(test_sample$label))), "\n \n")
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
LDA(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
logistic <- function(train_sample, test_sample, predictors){
model_logistic <- glm(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), family=binomial(link='logit'), data = train_sample)
predict_logistic <- predict(model_logistic, test_sample)
predict_logistic <- ifelse(predict_logistic > 0.5,1,0)
cat("Accuracy is", mean(test_sample$label == predict_logistic)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_logistic)), as.numeric(as.character(test_sample$label))), as.numeric(test_sample$label)), "\n \n")
logistic <- function(train_sample, test_sample, predictors){
model_logistic <- glm(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), family=binomial(link='logit'), data = train_sample)
predict_logistic <- predict(model_logistic, test_sample)
predict_logistic <- ifelse(predict_logistic > 0.5,1,0)
cat("Accuracy is", mean(test_sample$label == predict_logistic)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_logistic)), as.numeric(as.character(test_sample$label))), "\n \n")
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
logistic(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
model_rf <- randomForest(as.formula(paste("label ~ ", paste(all_modalities, collapse = ' + '))), ntree = 500, importance = TRUE, data = train_sample)
model_rf$importance
importance(model_rf, type = 1)
importance(model_rf, type=1)
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
if (mean(test_sample$label == predict_rf) == 1){
print(importance(model_rf, type=1))
}
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
if (mean(test_sample$label == predict_rf) == 1){
print(importance(model_rf, type=1)[,c(1,2)])
}
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
importance(model_rf, type = 1)
print(importance(model_rf, type = 1))
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
if (mean(test_sample$label == predict_rf) == 1){
cat(importance(model_rf, type=1))
}
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
if (mean(test_sample$label == predict_rf) == 1){
print(importance(model_rf, type=1))
}
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
print(importance(model_rf, type = 1))
df <- importance(model_rf, type = 1)
typeof(df)
df <- importance(model_rf, type = 1)
print(df)
df <- importance(model_rf, type = 1)
print(df$MeanDecreaseAccuracy)
df <- importance(model_rf, type = 1)
print(df[1])
df <- data.frame(importance(model_rf, type = 1))
print(df)
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = FALSE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
if (mean(test_sample$label == predict_rf) == 1){
df <- data.frame(importance(model_rf, type = 1))
print(df)
}
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
rf <- function(train_sample, test_sample, predictors){
set.seed(1)
model_rf <- randomForest(as.formula(paste("label ~ ", paste(predictors, collapse = ' + '))), ntree = 500, importance = TRUE, data = train_sample)
predict_rf <- predict(model_rf, test_sample)
cat("Accuracy is", mean(test_sample$label == predict_rf)*100, "% \n")
cat("AUROC is", AUC(as.numeric(as.character(predict_rf)), as.numeric(as.character(test_sample$label))), "\n \n")
if (mean(test_sample$label == predict_rf) == 1){
df <- data.frame(importance(model_rf, type = 1))
print(df)
}
}
for (i in 1:length(predictor_vars)){
cat("Predictors: ", predictor_vars[i], "\n")
rf(train_sample, test_sample, eval(parse(text = predictor_vars[i])))
}
